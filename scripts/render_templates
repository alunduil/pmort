#!/usr/bin/env python
#
# Copyright (C) 2013 by Alex Brandt <alunduil@alunduil.com>
#
# pmort is freely distributable under the terms of an MIT-style license.
# See COPYING or http://www.opensource.org/licenses/mit-license.php.

import argparse
import os
import itertools

from jinja2 import Environment, FileSystemLoader

from pmort.parameters import PARAMETERS
from pmort import information

def grouped_parameters():
    groups = {}

    for name, parameter in PARAMETERS.parameters.items():
        group = parameter['group']

        if group not in groups:
            groups[group] = {}

        groups[group][name] = parameter

    return groups

def render_templates(directory):
    '''Render all found templates in the directory specified.

    Finds all files with a jinja extension and renders them with jinja before
    placing them in the same location without the jinja extension.

    :``directory``: Directory to search for templates.

    '''

    env = Environment(loader = FileSystemLoader(directory))

    filenames = itertools.chain(*[ [ os.path.join(_[0], filename) for filename in _[2] ] for _ in os.walk(directory) if len(_[2]) ])
    filenames = [ _.replace(directory + '/', '') for _ in filenames ]
    filenames = [ _ for _ in filenames if _.endswith('.jinja') ]

    for filename in filenames:
        template = env.get_template(filename)

        with open(os.path.join(directory, filename.replace('.jinja', '')), 'w') as fh:
            fh.write(template.render(
                PARAMETERS = PARAMETERS,
                information = information,
                grouped_parameters = grouped_parameters()
                ))
            fh.flush()


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
            'directory',
            metavar = 'DIR',
            help = 'Directory to search for and render templates'
            )
    arguments = parser.parse_args()

    render_templates(arguments.directory)

if __name__ == '__main__':
    main()
